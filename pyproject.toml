[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "vs-data-api"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
keywords = []
authors = [
  { name = "tombola", email = "tombola@github" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "fastapi==0.109.2",
    "uvicorn==0.23.2",
    "pydantic==2.10.6",
    "pydantic-settings",
    "WooCommerce==3.0.0",
    "pandas==2.2.3",
    "rich==13.3.1",
    "datascroller==1.4.1",
    "click",
    "pypyodbc @ https://github.com/tombola/pypyodbc/archive/main.zip",
    "svcs",
]

[project.optional-dependencies]
dev = [
    "pudb",
    "ipython",
    "pre-commit",
    "objexplore",
]
test = [
    "pytest",
    "pytest-cov",
    "responses",
    "httpx",
    "toml",
    "pytest-timeout",
    "pytest-factoryboy"
]

[project.urls]
Documentation = "https://github.com/tombola/vs-data-api#readme"
Issues = "https://github.com/tombola/vs-data-api/issues"
Source = "https://github.com/tombola/vs-data-api"

[project.scripts]
vs = "vs_data_api.cli:cli"

[tool.hatch.version]
path = "src/vs_data_api/__about__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
[tool.hatch.envs.default.scripts]
test = "echo \"Not currently in `test` environment\nUse -e or HATCH_ENV to specify 'test' environment\""
envtest = "echo $VSDATA_TEST_WC_URL"

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-cov",
  "pytest-timeout",
  "responses",
  "httpx",
  "toml",
  "pudb",
  "svcs",
  "pypika",
  "pytest-factoryboy",
  "pytest-watcher",
]
env-include = [
  "VSDATA_TEST_*",
]
env-exclude = [
  "LIVE_*",
]

[tool.hatch.envs.test.env-vars]
TESTING = "1"

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test_int = "echo 'run scripts/start_test_env.zsh to start dependencies'; pytest {args:tests} --fmdb --wcapi --skipslow"
# test_int = "pytest {args:tests} --fmdb"

watchtest = "ptw --now . {args:tests}"
endpoints = "python -c \"from vs_data_api.main import app; print([print(route.path) for route in app.routes])\""
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/vs_data_api tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.flake8]
max-line-length = 120
ignore = "E203,F401"

[tool.isort]
profile = "black"
line_length = 120
known_first_party = ["vs_data_api", "vs_data"]

[tool.ruff.isort]
known-first-party = ["vs_data_api", "vs_data"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"**/__init__.py" = ["F401"]

[tool.coverage.run]
source_pkgs = ["vs_data_api", "tests"]
branch = true
parallel = true
omit = [
  "src/vs_data_api/__about__.py",
]

[tool.coverage.paths]
vs_data_api = ["src/vs_data_api", "*/vs-data-api/src/vs_data_api"]
tests = ["tests", "*/vs-data-api/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
